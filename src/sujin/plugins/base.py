"""
Base Plugin class for the Sujin framework.
"""

from typing import Dict, List, Optional, Any, Callable, Type
from abc import ABC, abstractmethod
from pydantic import BaseModel, Field

from ..core.models import Message, AgentInput, AgentOutput


class PluginConfig(BaseModel):
    """Configuration for a plugin."""
    enabled: bool = Field(default=True, description="Whether the plugin is enabled")
    priority: int = Field(default=0, description="Priority of the plugin (higher values run first)")
    config: Dict[str, Any] = Field(default_factory=dict, description="Additional configuration for the plugin")


class Plugin(ABC):
    """Base Plugin class that all plugins should inherit from."""
    
    def __init__(self, config: Optional[PluginConfig] = None):
        """
        Initialize a new Plugin.
        
        Args:
            config: Configuration for the plugin
        """
        self.config = config or PluginConfig()
        
    @property
    @abstractmethod
    def name(self) -> str:
        """Get the name of the plugin."""
        pass
        
    @property
    @abstractmethod
    def description(self) -> str:
        """Get the description of the plugin."""
        pass
        
    @property
    def priority(self) -> int:
        """Get the priority of the plugin."""
        return self.config.priority
        
    @property
    def enabled(self) -> bool:
        """Check if the plugin is enabled."""
        return self.config.enabled
        
    def on_load(self) -> None:
        """Called when the plugin is loaded."""
        pass
        
    def on_unload(self) -> None:
        """Called when the plugin is unloaded."""
        pass
        
    def pre_process(self, input_data: AgentInput) -> AgentInput:
        """
        Pre-process the input data before it's passed to the agent.
        
        Args:
            input_data: The input data to pre-process
            
        Returns:
            The pre-processed input data
        """
        return input_data
        
    def post_process(self, output_data: AgentOutput) -> AgentOutput:
        """
        Post-process the output data after it's generated by the agent.
        
        Args:
            output_data: The output data to post-process
            
        Returns:
            The post-processed output data
        """
        return output_data
        
    def on_error(self, error: Exception, input_data: AgentInput) -> Optional[AgentOutput]:
        """
        Called when an error occurs during agent execution.
        
        Args:
            error: The error that occurred
            input_data: The input data that caused the error
            
        Returns:
            An optional output to return instead of raising the error
        """
        return None
